(defpoll networkname
	:interval "5s"
	'scripts/get_network')
(defpoll volume 
	:interval "5s"
	'scripts/get_volume')
(defpoll mic 
	:interval "5s" 
	'pactl get-source-volume @DEFAULT_SOURCE@ | grep -o "..[0-9]%" | grep -o -m 1 "..[0-9]"')
(defpoll brightness 
	:interval "1s" 
	'brightnessctl get')
(defvar brightnessMax
	852)
(defpoll volume-icon
	:interval "1s" 
	'scripts/get_volume_icon')
(defpoll mic-icon
	:interval "1s" 
	'echo ')
(defpoll brightness-icon
	:interval "5s" 
	'echo ')
(defpoll networkicon 
	:interval "5s"
	'scripts/get_network_icon')
(defpoll current_battery
	:interval "5s"
	'scripts/get_battery')
(defpoll batteryicon
	:interval "5s"
	'scripts/get_battery_icon')
(defpoll time
	:interval "1s"
	'date +"%a %d/%m/%y %H:%M"')
(deflisten workspaces 
	:initial "[]" 
	"bash scripts/get-workspaces.bash")
(deflisten current_workspace 
	:initial "1" 
	"bash scripts/get-active-workspace.bash")
(defvar volume-visible false)
(defpoll artist 
	:interval "5s"
	"playerctl metadata artist")
(defpoll title 
	:interval "5s"
	"playerctl metadata title")

(defwindow bar
	:monitor 1
	:geometry (geometry :x "0%"
		:y "0px"
		:height "35px"
		:width "100%"
		:anchor "top center")
	:stacking "fg"
	:exclusive true
	:wm-ignore false
	(box
		:halign "fill"
		:space-evenly "true"
		:orientation "horizontal"
		(bar-left)
		(bar-center)
		(bar-right)
	)
)

(defwidget bar-left []
	(box
		:space-evenly "false"
		:halign "start"
		:class "bar-left"
		:orientation "horizontal"
		(workspaces)
	)
)

(defwidget workspaces []
	(eventbox 
		:onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" 
		:class "workspaces-widget"
		(box 
		:space-evenly true
		:halign "start"
			(label
				:text "${workspaces}${current_workspace}" 
				:visible false 
			)
			(for workspace in workspaces
				(eventbox 
					:onclick "hyprctl dispatch workspace ${workspace.id}"
					(box 
						:class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
						(label 
							:text "${workspace.id == current_workspace ? "" : ""}"
						)
					)
				)
			)
		)
	)
)

(defwidget bar-center []
	(revealer
		:transition "slideright"
		:reveal "${title == "" ? false : true}"
		(box
			:space-evenly "false"
			:halign "center"
			:class "bar-center"
			:orientation "horizontal"
			(media)
		)
	)
)

(defwidget media []
	(eventbox
		:onclick "scripts/eww_toggle mediawindow"
		(box
			:halign "center"
			:space-evenly "false"
			:class "media"
			(label
				:class "media-icon"
				:text " "
			)
			(label 
				:text "${artist} - ${title}" 
				:limit-width 25
			)
		)
	)
)

(defwidget bar-right []
		(box
			:halign "end"
			:space-evenly false
			:class "bar-right"
			(notification)
			(network)
			(volume)
			(battery)
			(clock)
		)
)

(defwidget network []
	(box
		:space-evenly "false"
		:halign "end"
		(label
			:halign "end"
			:class "network-icon"
			:text networkicon
		)
		(label
			:halign "end"
			:class "network-text"
			:text networkname
			:limit-width 20
		)
	)
)

(defwidget clock []
	(box
		:halign "end"
		:space-evenly "false"
		(label
			:halign "end"
			:class "clock-icon"
			:text ""
			:limit-width 1
		)
		(label
			:halign "end"
			:class "clock-text"
			:limit-width 18
			:text time
		)
	)
)

(defwidget battery []
	(box
		:halign "end"
		(label
			:halign "end"
			:class "battery-icon"
			:text batteryicon
		)
		(label
			:halign "end"
			:class "battery-text"
			:text current_battery
		)
	)
)

(defwidget volume []
	(box
		:halign "end"
		:space-evenly "false"
		(eventbox
			:class "volume-button"
			:onclick "scripts/eww_toggle volumehover"
			(label
				:text volume-icon
				:class "volume-icon"
			)
		)
	)
)

(defwidget brightness []
	(box
		:halign "end"
		(eventbox
			:class "brightness-button"
			:onclick "./scripts/eww_toggle brightnesshover"
			(label
				:halign "end"
				:class "brightness-icon"
				:text brightness-icon 
			)
		)
		(label
			:halign "end"
			:class "brightness"
			:text "${round((brightness/brightnessMax * 100),0)}%"
		)
	)
)

(defwidget notification []
	(eventbox
		:onclick "sleep 0.1; swaync-client -t -sw"
		:halign "end"
		(label
			:text ""
			:class "notification-icon"
		)
	)
)

